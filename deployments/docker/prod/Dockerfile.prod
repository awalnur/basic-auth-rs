# Production Dockerfile for Rust Authentication Service
# Multi-stage build optimized for minimal image size and security

# 1. Builder stage
FROM rust:1.75-slim-bullseye as builder

# Install required dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libpq-dev \
    pkg-config \
    libssl-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create a new empty project
WORKDIR /usr/src/app
RUN cargo init

# Copy Cargo.toml and Cargo.lock
COPY Cargo.toml Cargo.lock ./

# Build dependencies (this will be cached unless Cargo.toml or Cargo.lock changes)
RUN cargo build --release --lib && \
    rm -rf src/*.rs && \
    rm -rf target/release/deps/basic_auth*

# Copy the source code
COPY . .

# Build the release version with optimizations
RUN cargo build --release

# 2. Runtime stage - using a minimal Debian image
FROM debian:bullseye-slim

# Install runtime dependencies only
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libpq5 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy the binary from the builder stage
COPY --from=builder /usr/src/app/target/release/basic-auth /app/basic-auth

# Copy the migrations folder for Diesel
COPY --from=builder /usr/src/app/migrations /app/migrations

# Create non-root user for better security
RUN groupadd -r appuser && useradd -r -g appuser appuser
RUN chown -R appuser:appuser /app
USER appuser

# Expose the port
EXPOSE 8080

# Environment variables
ENV RUST_LOG=info

# Command to run
CMD ["./basic-auth"]
